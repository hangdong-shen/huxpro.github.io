---
layout:     post
title:      "技术方案选择和架构设计总结"
subtitle:   " \"architect \""
date:       2020-02-02 16:27:45 
author:     "Hangdong"
header-img: "img/post-sample-image.jpg"
catalog: true
tags:
    - 工作总结
---

# 前言 #
我从本科生阶段开始了软件编码的工作，最开始的编码主要是解决一些问题，涉及到的是算法的实现。主要采用的算法有冒泡排序，快速排序，HASH和贪心算法等。那时候没有架构设计的这个思维，基本上是以数据输入，算法，运算后的数据输出这个套路玩。后面开始接触商业软件开发的时候，逐渐开始进行方案研究和设计。这时候会考虑方案的可行性，从业务流和数据流方面进行模块的设计编写。随着参与的软件规模越来越庞大，复杂度和要求越来越高，对技术选型、架构设计的关注越来越多，本文就是这些年做设计架构的总结。

---

# 正文 #
## 技术方案流程 ##
通常情况下，技术解决方案整体流程图如下：
![](/img/in-post/post-mwarch/design.png)

在项目计划和需求规格主体明确的情况下，就需要制定技术方案了，一般情况下根据历史数据和当下成熟的技术进行多个技术方案的策划，然后从中选择适合本项目的技术方案。选定技术方案后，就需要实施架构设计，同时组织架构设计中的模块负责人进行demo的验证。demo验证通过后，就可以开始功能的迭代了。

## 制定技术方案的选择准则 ##
项目经理与设计组成员分析本项目的项目计划、需求规格说明，分析本项目各需求要素，建立本项目《技术方案选择准则》，例如：

客户需求要素包括：

- 成本
- 进度
- 功能实现
- 性能
- 界面/外观

公司战略需求要素包括：

- 维护客户关系，满足客户需求
- 技术创新
- 节约成本
- 加快进度
- 复用率最大化
- 培养新人

确定的项目最佳技术方案的选择准则为：

- 成本因素优先
- 成熟产品优先考虑
- 提高开发速度
- 开源组件选择的时候同时需要考虑开源社区的活跃度、支持度
- 新技术的学习成本
技术方案的选择准则将作为技术方案开发的依据。

## 提出解决方案 ##
分析本项目的项目计划、需求规格说明，参考组织财富库中的资产，设计出多个侯选的技术解决方案。设计应基于成本、进度、技术性能、生命周期、产品运作条件、风险、需求和技术变化等多个因素来进行，开发出的解决方案将作为后续设计工作的基础，必须保证可行性与可操作性。

并非所有项目都要求提供多个技术解决方案，但为保证项目质量，大型项目应至少提供两个以上技术解决方案，将解决方案写入《技术方案书》。

在实际项目的实施中根据项目情况，提供一个技术解决方案也是比较常见的，此时需要能对方案中可能存在的风险进行规避和预警。

## 选择确定技术解决方案 ##
项目经理、设计组成员、评审组成员评估各候选的技术解决方案，根据技术方案选择准则，选择本项目的技术解决方案。

1. 根据技术方案选择准则，评估可选的解决方案，识别出各解决方案能满足的需求和不能解决的问题，以及由该解决方案衍生出的需求和问题
2. 针对评估结果，选择满足需求“最好”的一组解决方案
3. 基于选定的组织方案，分析本项目中需购买、重用、开发的需求组件
4. 记录评估过程及方案选择理由，完成决策分析报告，将该报告与侯选的解决方案、选定的解决方案共同纳入配置管理。

## 架构设计 ##
项目经理与设计组成员根据选定的技术方案，进行软件的架构设计，架构设计确定后进行功能设计、复用外购分析、接口设计、对各组件界面、内部结构、功能实现、数据库设计等部分。

一般来说，需要结合客户需求规格说明及系统不同层次的数据流图并利用最高输入\输入抽象点，把整个系统分解为模块并确定模块功能，确定每个功能模块的输入、转换和输出数据流，并考虑各方面数据接口、存储方式等。迭代逐步分解各系统模块，直到确定每个功能模块只执行一个行为为止，同时细化数据结构化设计，完善数据字典以确保系统能获得所需的输出结果，从而完成系统架构设计。

## 架构设计的一些抉择 ##
### 结构化编程
### 面向对象编程
### 面向函数编程
### SOLID原则
### DIP
通过依赖反转，打破高层组件对底层的依赖
### 封装和隐藏
template和class，选择泛型编程还是特定的类型，取决于这个物件到底有多么common
### 弹性和扩展性
### 最少的复杂度 ###
简单来说，就是要易于理解和详细实现。

### 易于维护
设计出易于维护的代码对于软件之后的维护工作帮助很大，也能避免软件危机的发生。

### 松耦合、高内聚
各部分的关联越少意味着你在测试，集成，维护的时候可以轻松不止一点点。
高内聚：一个模块内各个元素彼此结合的紧密程度，一个类特别是一个方法应该专注于一件事。
松耦合：一个软件架构内不同模块之间互连程度的度量，通常需要根据业务流和数据流进行功能的正确划分来达到解耦。

### 可扩展
做软件唯一就是变化。如果项目是不可适用变化的话，基本上就可以贴上不合格的标签了。也许觉得改代码就可以了，但面向对象的设计原则里有条，类是可扩展还不可以修改的。扩展一般是通过继承来是想的。而修改特别是接口往往会引起许多莫名其妙的问题的。在给自己软件加功能的时候不要对底层甚至架构大动。

### 高扇入
按照结构化设计方法，一个应用程序是由多个功能相对独立的模块所组成。
扇入：是指直接调用该模块的上级模块的个数，被其它类或方法引用。那高扇入也就是说某类/方法被很多其它类引用了。也就是利用率很高了。如果某段代码连写了三次，就要把它单独作为一个方法或类。

### 低扇出
扇出：是指该模块直接调用的下级模块的个数。扇出大表示模块的复杂度高，需要控制和协调过多的下级模块；但扇出过小（例如总是1）也不好。扇出过大一般是因为缺乏中间层次，应该适当增加中间层次的模块。扇出太小时可以把下级模块进一步分解成若干个子功能模块，或者合并到它的上级模块中去。
设计良好的软件结构，通常顶层扇出比较大，中间扇出小，底层模块则有大扇入。 

### 可移植
举个例子，客户的需求是变化的，有的时候可能要求从B/S转为C/S，如果在设计的时候就使用MVC来进行移植性的控制。那么，工作量就会得到控制，省下的就是利润。

### 精简性
能少不多，程序员不能觉某个功能可能有用就加上。因为这会增加测试等方面的任务,而且程序员认为用户会喜欢的往往用户偏不喜欢。

### 层次性
层次性，最常见的就是大家说的三层架构了。好处有几个，你换了数据库而不必管上层。另还有一个就是更好的分工。经验不足的编码人员写初级代码可以模块化起来。以后想重构就重构，想换掉就换掉。也就减少了复杂度了。
  
### 使用标准技术
这样会给大家熟悉的感觉.如使用相同的框架,代码风格应该使用相同的标准，可以复用设计模式的就复用以下，成熟的东西可靠性强。


## 结束
好了，今天暂时更到这，欢迎大家阅读、批评和指正，下回再见。

---


